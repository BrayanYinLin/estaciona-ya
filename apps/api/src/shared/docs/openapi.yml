openapi: 3.0.0
info:
  title: Estaciona-YA API
  version: 1.0.0
  description: API for the Estaciona-YA application
servers:
  - url: http://localhost:3000/api
paths:
  /auth/tenant:
    post:
      summary: Registra un nuevo arrendatario
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Arrendatario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
  /auth/lessor:
    post:
      summary: Registra un nuevo arrendador
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Arrendador creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
  /auth/login:
    post:
      summary: Inicia sesión
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: Sesión iniciada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
        '404':
          description: User not found
  /auth/refresh:
    get:
      summary: Refreshes the access token
      tags:
        - Auth
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Unauthorized
  /user:
    get:
      summary: Obtiene el perfil del usuario
      tags:
        - User
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: http
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil del usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found
  delete:
      summary: Desactivar el usuario
      tags:
        - User
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: http
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil del usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ResponseUserProfile:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
          format: email
        dni:
          type: string
          maxLength: 8
        state:
          type: boolean
        role:
          type: string
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        dni:
          type: string
          maxLength: 8
      required:
        - name
        - email
        - password
        - dni
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
    UserResponse:
      type: object
      properties:
        id:
          type: number
        role:
          $ref: '#/components/schemas/RoleResponse'
    RoleResponse:
      type: object
      properties:
        name:
          type: string
