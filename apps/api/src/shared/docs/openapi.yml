openapi: 3.0.0
info:
  title: Estaciona-YA API
  version: 1.0.0
  description: API for the Estaciona-YA application
servers:
  - url: http://localhost:3000
paths:
  /api/auth/tenant:
    post:
      summary: Registra un nuevo arrendatario
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Arrendatario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
  /api/auth/lessor:
    post:
      summary: Registra un nuevo arrendador
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Arrendador creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
  /api/auth/login:
    post:
      summary: Inicia sesión
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: Sesión iniciada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
        '404':
          description: User not found
  /api/auth/refresh:
    get:
      summary: Refreshes the access token
      tags:
        - Auth
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Unauthorized
  /api/auth/logout:
    get:
      summary: Cierra la sesión del usuario
      tags:
        - Auth
      responses:
        '200':
          description: Sesión cerrada correctamente
        '401':
          description: Unauthorized
  /api/auth/validate:
    get:
      summary: Valida el token de acceso
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token de acceso validado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
  /api/auth/verify:
    post:
      summary: Verifica el código de autenticación
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        '200':
          description: Código de autenticación verificado correctamente
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /api/user:
    get:
      summary: Obtiene el perfil del usuario
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil del usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      summary: Desactivar el usuario
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil del usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /api/user/me:
    patch:
      summary: Actualiza el perfil del usuario
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                dni:
                  type: string
                  maxLength: 8
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Perfil del usuario actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserProfile'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /api/user/photo/{photoId}:
    get:
      summary: Obtiene la foto de un usuario
      tags:
        - User
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Foto del usuario obtenida correctamente
          content:
            image/*: {}
        '404':
          description: Foto no encontrada
  /api/user/me/password:
    patch:
      summary: Cambia la contraseña del usuario
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '204':
          description: Contraseña actualizada correctamente
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /api/districts:
    get:
      summary: Obtiene todos los distritos
      tags:
        - Location
      responses:
        '200':
          description: Distritos obtenidos correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DistrictResponse'
        '404':
          description: No se encontraron distritos
  /api/location:
    get:
      summary: Obtiene la ubicacion de una direccion
      tags:
        - Location
      parameters:
        - name: address
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ubicacion obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseThirdPartyLocation'
        '404':
          description: Ubicacion no encontrada
  /api/rent-mode:
    get:
      summary: Obtiene todos los modos de alquiler
      tags:
        - Garage
      responses:
        '200':
          description: Modos de alquiler obtenidos correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentModeResponse'
        '404':
          description: No se encontraron modos de alquiler
  /api/garage/me:
    get:
      summary: Obtiene todos los garages de un usuario
      tags:
        - Garage
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Garages obtenidos correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GarageResponse'
        '401':
          description: Unauthorized
  /api/garage/{id}/photos/{photoId}:
    get:
      summary: Obtiene la foto de un garage
      tags:
        - Garage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: photoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Foto del garage obtenida correctamente
          content:
            image/*: {}
        '404':
          description: Foto no encontrada
  /api/garage:
    post:
      summary: Crea un nuevo garage
      tags:
        - Garage
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGarageDto'
      responses:
        '201':
          description: Garage creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GarageResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RentModeResponse:
      type: object
      properties:
        id:
          type: number
        mode_name:
          type: string
    ResponseUserProfile:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
          format: email
        dni:
          type: string
          maxLength: 8
        state:
          type: boolean
        role:
          type: string
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        dni:
          type: string
          maxLength: 8
      required:
        - name
        - email
        - password
        - dni
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
      required:
        - email
        - password
    ChangePasswordDto:
      type: object
      properties:
        id:
          type: string
        oldPassword:
          type: string
          format: password
          minLength: 8
        newPassword:
          type: string
          format: password
          minLength: 8
      required:
        - id
        - oldPassword
        - newPassword
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
    UserResponse:
      type: object
      properties:
        id:
          type: number
        role:
          $ref: '#/components/schemas/RoleResponse'
    RoleResponse:
      type: object
      properties:
        name:
          type: string
    DistrictResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    ResponseThirdPartyLocation:
      type: object
      properties:
        latitude:
          type: string
        longitude:
          type: string
        address:
          type: string
    GarageResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        width:
          type: number
        height:
          type: number
        length:
          type: number
        price:
          type: number
        is_active:
          type: boolean
        location:
          $ref: '#/components/schemas/ResponseThirdPartyLocation'
        photos:
          type: array
          items:
            type: string
    CreateGarageDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        width:
          type: number
        height:
          type: number
        length:
          type: number
        price:
          type: number
        location_id:
          type: string
        rent_mode_id:
          type: string
        photos:
          type: array
          items:
            type: string
            format: binary
